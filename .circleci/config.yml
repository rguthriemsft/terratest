defaults: &defaults
  machine:
    enabled: true
    image: "ubuntu-1604:201903-01"
  environment:
    GRUNTWORK_INSTALLER_VERSION: v0.0.21
    MODULE_CI_VERSION: v0.16.0
    TERRAFORM_VERSION: 0.12.20
    TERRAGRUNT_VERSION: v0.21.11
    PACKER_VERSION: 1.5.1
    GOLANG_VERSION: 1.14
    K8S_VERSION: v1.15.0  # Same as EKS
    MINIKUBE_VERSION: v1.9.2
    HELM_VERSION: v3.1.1
    KUBECONFIG: /home/circleci/.kube/config

setup_minikube: &setup_minikube
  command: setup-minikube --k8s-version "$K8S_VERSION" --minikube-version "$MINIKUBE_VERSION"

install_helm: &install_helm
  name: install helm
  command: |
    # install helm
    curl -Lo helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
    tar -xvf helm.tar.gz
    chmod +x linux-amd64/helm
    sudo mv linux-amd64/helm /usr/local/bin/

    # Initialize stable repository
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/


install_gruntwork_utils: &install_gruntwork_utils
  name: install gruntwork utils
  command: |
    curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
    gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/module-ci" --tag "${MODULE_CI_VERSION}"
    gruntwork-install --module-name "kubernetes-circleci-helpers" --repo "https://github.com/gruntwork-io/module-ci" --tag "${MODULE_CI_VERSION}"
    configure-environment-for-gruntwork-module \
      --terraform-version ${TERRAFORM_VERSION} \
      --terragrunt-version ${TERRAGRUNT_VERSION} \
      --packer-version ${PACKER_VERSION} \
      --go-version ${GOLANG_VERSION} \
      --go-src-path ./


version: 2
jobs:
  setup:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - gomod-{{ checksum "go.sum" }}

      # Install gruntwork utilities
      - run:
          <<: *install_gruntwork_utils

      - save_cache:
          key: gomod-{{ checksum "go.sum" }}
          paths:
          - $HOME/go/src/

      # Run pre-commit hooks and fail the build if any hook finds required changes.
      - run:
          name: run precommit
          command: |
            go get golang.org/x/tools/cmd/goimports
            # Oct 26, 2019: Install the last known working version of pre-commit. Also, we have to pin the version of a
            # transitive dependency that is being pulled in (cfgv) which released a new version that is no longer compatible
            # with any python < 3.6.
            pip install pre-commit==1.11.2 cfgv==2.0.1
            pre-commit install
            pre-commit run --all-files

      # Build any binaries that need to be built
      # We always want to build the binaries to test that there are no compile failures. Also, we will use the
      # terratest_log_parser to parse out the test output during a failure. Finally, on releases, we'll push these
      # binaries to GitHub as release assets.
      - run:
          command: |
            GO_ENABLED=0 build-go-binaries \
              --app-name terratest_log_parser \
              --src-path ./cmd/terratest_log_parser \
              --dest-path ./cmd/bin \
              --ld-flags "-X main.VERSION=$CIRCLE_TAG -extldflags '-static'"

            GO_ENABLED=0 build-go-binaries \
              --app-name pick-instance-type \
              --src-path ./cmd/pick-instance-type \
              --dest-path ./cmd/bin \
              --ld-flags "-X main.VERSION=$CIRCLE_TAG -extldflags '-static'"
          when: always

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  test:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          <<: *install_gruntwork_utils

      # The weird way you have to set PATH in Circle 2.0
      - run: echo 'export PATH=$HOME/.local/bin:$HOME/terraform:$HOME/packer:$PATH' >> $BASH_ENV

      # Make GCP Service Account creds available as a file
      - run: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json' >> $BASH_ENV

      # Run the tests. Note that we set the "-p 1" flag to tell Go to run tests in each package sequentially. Without
      # this, Go buffers all log output until all packages are done, which with slower running tests can cause CircleCI
      # to kill the build after more than 10 minutes without log output.
      # NOTE: because this doesn't build with the kubernetes tag, it will not run the kubernetes tests. See
      # kubernetes_test build steps.
      - run: mkdir -p /tmp/logs
      # check we can compile the azure code, but don't actually run the tests
      - run: run-go-tests --packages "-p 1 -tags=azure -run IDontExist ./modules/azure"
      - run: run-go-tests --packages "-p 1 ./..." | tee /tmp/logs/test_output.log

      - run:
          command: ./cmd/bin/terratest_log_parser_linux_amd64 --testlog /tmp/logs/test_output.log --outputdir /tmp/logs
          when: always

      # Store test result and log artifacts for browsing purposes
      - store_artifacts:
          path: /tmp/logs
      - store_test_results:
          path: /tmp/logs


  kubernetes_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          <<: *install_gruntwork_utils

      # The weird way you have to set PATH in Circle 2.0
      - run: echo 'export PATH=$HOME/.local/bin:$HOME/terraform:$HOME/packer:$PATH' >> $BASH_ENV

      - run:
          <<: *setup_minikube

      # Run the Kubernetes tests. These tests are run because the kubernetes build tag is included, and we explicitly
      # select the kubernetes tests
      - run:
          command: |
            mkdir -p /tmp/logs
            # Run the unit tests first, then the integration tests. They are separate because the integration tests
            # require additional filtering.
            run-go-tests --packages "-tags kubernetes ./modules/k8s" | tee /tmp/logs/test_output.log
            run-go-tests --packages "-tags kubernetes -run TestKubernetes ./test" | tee -a /tmp/logs/test_output.log

      - run:
          command: ./cmd/bin/terratest_log_parser_linux_amd64 --testlog /tmp/logs/test_output.log --outputdir /tmp/logs
          when: always

      # Store test result and log artifacts for browsing purposes
      - store_artifacts:
          path: /tmp/logs
      - store_test_results:
          path: /tmp/logs


  helm_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          <<: *install_gruntwork_utils

      # The weird way you have to set PATH in Circle 2.0
      - run: echo 'export PATH=$HOME/.local/bin:$HOME/terraform:$HOME/packer:$PATH' >> $BASH_ENV

      - run:
          <<: *setup_minikube

      - run:
          <<: *install_helm

      # Run the Helm tests. These tests are run because the helm build tag is included, and we explicitly
      # select the helm tests
      - run:
          command: |
            mkdir -p /tmp/logs
            # Run the unit tests first, then the integration tests. They are separate because the integration tests
            # require additional filtering.
            run-go-tests --packages "-tags helm ./modules/helm" | tee /tmp/logs/test_output.log
            run-go-tests --packages "-tags helm -run TestHelm ./test" | tee -a /tmp/logs/test_output.log

      - run:
          command: ./cmd/bin/terratest_log_parser_linux_amd64 --testlog /tmp/logs/test_output.log --outputdir /tmp/logs
          when: always

      # Store test result and log artifacts for browsing purposes
      - store_artifacts:
          path: /tmp/logs
      - store_test_results:
          path: /tmp/logs


  deploy:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci
      - run: curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version v0.0.21
      - run: gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/module-ci" --tag "v0.13.2"
      - run: cd cmd/bin && sha256sum * > SHA256SUMS
      - run: upload-github-release-assets cmd/bin/*


workflows:
  version: 2
  build-and-test:
    jobs:
      - setup:
          filters:
            tags:
              only: /^v.*/

      - test:
          requires:
            - setup
          filters:
            tags:
              only: /^v.*/

      - kubernetes_test:
          requires:
            - setup
          filters:
            tags:
              only: /^v.*/

      - helm_test:
          requires:
            - setup
          filters:
            tags:
              only: /^v.*/

      - deploy:
          requires:
            - test
            - kubernetes_test
            - helm_test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
